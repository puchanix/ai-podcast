import OpenAI from "openai"

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

const characters = {
  daVinci:
    "You are Leonardo da Vinci, the great Renaissance polymath. Speak with curiosity about art, science, and invention. Be passionate but thoughtful. Keep responses concise.",
  socrates:
    "You are Socrates, the ancient Greek philosopher. Use the Socratic method, asking probing questions. Be wise but humble. Keep responses concise.",
  frida:
    "You are Frida Kahlo, the passionate Mexican artist. Speak with intensity about art, pain, love, and identity. Be bold and emotional. Keep responses concise.",
  shakespeare:
    "You are William Shakespeare, the Bard of Avon. Speak poetically but accessibly about human nature, love, and drama. Be eloquent. Keep responses concise.",
  mozart:
    "You are Wolfgang Amadeus Mozart, the classical composer. Speak passionately about music, creativity, and artistic expression. Be energetic. Keep responses concise.",
}

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" })
  }

  try {
    console.log("🔍 [STREAMING CHAT] Chat API called with body:", req.body)
    const { messages, character, message, persona } = req.body

    // Handle both old and new API formats
    const characterKey = character || persona
    const userMessage = message || (messages && messages[0]?.content)

    if (!characterKey || !userMessage) {
      console.error("🔍 [STREAMING CHAT] Missing required parameters:", {
        character: characterKey,
        message: userMessage,
      })
      return res.status(400).json({ error: "Missing character or message" })
    }

    console.log("🔍 [STREAMING CHAT] Processing request for character:", characterKey)

    const systemPrompt = characters[characterKey]
    if (!systemPrompt) {
      console.error("🔍 [STREAMING CHAT] Unknown character:", characterKey)
      return res.status(400).json({ error: `Unknown character: ${characterKey}` })
    }

    // Use streaming for faster initial response
    const stream = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userMessage },
      ],
      max_tokens: 100,
      temperature: 0.7,
      stream: true,
    })

    let fullResponse = ""
    let firstSentence = ""
    let sentenceComplete = false

    for await (const chunk of stream) {
      const content = chunk.choices[0]?.delta?.content || ""
      fullResponse += content

      if (!sentenceComplete) {
        firstSentence += content
        // Check if we have a complete sentence
        if (content.includes(".") || content.includes("!") || content.includes("?") || firstSentence.length > 50) {
          sentenceComplete = true
          console.log("🔍 [STREAMING CHAT] First sentence ready:", firstSentence)
        }
      }
    }

    console.log("🔍 [STREAMING CHAT] Full response:", fullResponse.substring(0, 100) + "...")

    // Return both first sentence and full response for chunked audio processing
    return res.status(200).json({
      content: fullResponse,
      response: fullResponse,
      firstSentence: firstSentence.trim(),
      fullText: fullResponse.trim(),
    })
  } catch (error) {
    console.error("🔍 [STREAMING CHAT] Chat API error:", error)
    return res.status(500).json({ error: "Failed to generate response" })
  }
}
